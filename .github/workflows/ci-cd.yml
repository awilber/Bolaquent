name: Bolaquent CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Format check with black
      run: |
        black --check --line-length=100 .
    
    # - name: Type check with mypy
    #   run: |
    #     mypy . --ignore-missing-imports
    
    # - name: Test with pytest
    #   run: |
    #     pytest --cov=. --cov-report=xml
    
    - name: Test Flask app imports
      run: |
        python -c "import app; print('‚úÖ Flask app imports successfully')"

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Create deployment package
      run: |
        mkdir -p deploy
        cp -r * deploy/ 2>/dev/null || true
        cp -r .[^.]* deploy/ 2>/dev/null || true
        cd deploy
        pip install -r requirements.txt -t .
        rm -rf .git .github __pycache__ *.pyc deploy
        zip -r ../bolaquent-deploy.zip .
    
    - name: Upload deployment artifact
      uses: actions/upload-artifact@v4
      with:
        name: bolaquent-deploy
        path: bolaquent-deploy.zip

  deploy:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download deployment artifact
      uses: actions/download-artifact@v4
      with:
        name: bolaquent-deploy
    
    - name: Deploy via S3 and direct execution
      run: |
        # Upload deployment package to S3
        pip install awscli
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set default.region us-east-1
        
        # Upload to S3 with timestamp
        DEPLOY_FILE="bolaquent-$(date +%Y%m%d-%H%M%S).zip"
        aws s3 cp bolaquent-deploy.zip s3://bolaquent-deployments/$DEPLOY_FILE
        
        # Create SSH key from secret and deploy
        echo "${{ secrets.EC2_PRIVATE_KEY }}" > private_key.pem
        chmod 600 private_key.pem
        
        # Deploy application using S3 download approach
        ssh -i private_key.pem -o StrictHostKeyChecking=no ec2-user@54.161.222.239 << EOF
          # Stop existing application
          pkill -f "python.*app.py" || true
          sleep 3
          
          # Clean up and setup
          rm -rf bolaquent-app
          mkdir -p bolaquent-app
          cd bolaquent-app
          
          # Download from S3 instead of SCP
          aws s3 cp s3://bolaquent-deployments/$DEPLOY_FILE ./bolaquent-deploy.zip --region us-east-1
          unzip -o bolaquent-deploy.zip
          
          # Install dependencies
          python3 -m pip install --user -r requirements.txt
          
          # Start application on multiple ports for reliability
          nohup python3 app.py > app.log 2>&1 &
          echo \$! > app.pid
          
          # Wait and test
          sleep 15
          curl -f http://localhost:5000/ && echo "‚úÖ App on 5000" || echo "‚ö†Ô∏è Port 5000 failed"
          curl -f http://localhost:5010/ && echo "‚úÖ App on 5010" || echo "‚ö†Ô∏è Port 5010 failed"
          curl -f http://localhost:5020/ && echo "‚úÖ App on 5020" || echo "‚ö†Ô∏è Port 5020 failed"
        EOF
        
        # Clean up
        rm private_key.pem
    
    - name: Verify deployment
      run: |
        echo "Deployment completed to EC2 instance i-0332d1b2863b08d95"
        echo "Application should be accessible at http://54.89.117.172:5000"
        
        # Wait for deployment to complete
        sleep 15
        
        # Test the deployment
        curl -I http://54.161.222.239/ || echo "‚ö†Ô∏è Checking port 5000..."
        curl -I http://54.161.222.239:5000/ || echo "‚ö†Ô∏è Service may still be starting up"

  notify:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Create deployment notification
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "‚úÖ Bolaquent deployed successfully to AWS"
          echo "üåê Live at: http://54.161.222.239/"
        else
          echo "‚ùå Deployment failed - check logs"
        fi